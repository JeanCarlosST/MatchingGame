@page "/partida/{PartidaId:int}/{Usuario}"
@using MatchingGame.Shared;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (partidaEncontrada)
{
    <div class="row d-flex justify-content-center">

        <div class="col-12 col-sm-10 col-md-7 col-lg-6 col-xl-4">

            <div class="container">

                <div class="row">
                    @for (int i = 0; i < shuffledAnimals.Count; i++)
                    {
                        int index = i;
                        string animal = shuffledAnimals[index];
                        <button type="button" class="btn btn-outline-dark col-3" disabled="@(!partidaIniciada)"
                                @onclick="@(()=> ButtonClick(animal, index))">
                            <h1>@animal</h1>
                        </button>
                    }
                </div>
            </div>

            <div class="row d-flex justify-content-between px-3 my-3">

                @if (!partidaIniciada && !jugadorDesconectado)
                {
                    <button type="button" class="btn btn-success btn-lg col-lg-5 col-md-12" @onclick="IniciarPartida" disabled="@(buscandoPartida)">
                        @if(partidas == 0)
                        {
                            <span>Listo</span>
                        }
                        else
                        {
                            <span>Revancha</span>
                        }
                    </button>
                }

                @if (jugadorDesconectado || partidaTerminada)
                {
                    <button type="button" class="btn btn-warning btn-lg col-lg-5 col-md-12 mt-lg-0 mt-3" @onclick="BuscarOtraPartida">Buscar otro oponente</button>
                }
            </div>

        <div class="d-flex flex-column my-1">
            <h3>Parejas encontradas: @parejasEncontradas</h3>
            <h3>Puntos: @puntos</h3>
            <h3>Tiempo: @tiempo</h3>
        </div>

        </div>

        <div class="overflow-auto col-md-12 col-lg-6 col-xl-4 mt-1" style="height:450px">

            <ol class="list-group">

                @for (int i = movimientos.Count-1; i >= 0; i--)
                {
                    var move = movimientos[i];
                    <li class="list-group-item">@move</li>
                }

            </ol>

        </div>
    </div>
}

@code
{
    [Parameter]
    public int PartidaId { get; set; }

    [Parameter]
    public string Usuario { get; set; }
    public bool buscandoPartida;
    public bool partidaIniciada;
    public bool partidaTerminada;
    public bool partidaEncontrada;
    public bool jugadorDesconectado;

    const string CaracterVacio = "\u200D";

    List<string> movimientos = new();

    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string tiempo;
    string lastAnimalFound = CaracterVacio;
    int lastAnimalIndex = -1;
    private HubConnection hubConnection;
    int parejasEncontradas = 0;
    int puntos = 0;
    int partidas = 0;

    List<string> shuffledAnimals = new List<string>();
    List<string> animalEmoji = new List<string>()
{
        "🐵","🐵",
        "🐶","🐶",
        "🐷","🐷",
        "🐴","🐴",
        "🐔","🐔",
        "🦊","🦊",
        "🐸","🐸",
        "🐼","🐼"
    };

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        for (int i = 0; i < animalEmoji.Count; i++)
            shuffledAnimals.Add(CaracterVacio);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/partida_hub"))
        .Build();

        hubConnection.On<bool>("IniciarPartida", (iniciada) =>
        {
            partidaIniciada = iniciada;

            if (partidaIniciada)
            {
                buscandoPartida = false;
                SetupGame();
                timer.Start();

                var move = "Partida iniciada";
                movimientos.Add(move);
                StateHasChanged();
            }
        });

        hubConnection.On<bool,string,string>("RecibirPartida", (encontrada, jugadorUno, jugadorDos) =>
        {
            partidaEncontrada = encontrada;
            if (partidaEncontrada)
            {
                movimientos.Add($"{jugadorUno} se ha conectado");
                movimientos.Add($"{jugadorDos} se ha conectado");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
            StateHasChanged();
        });

        hubConnection.On<string, int>("RecibirMovimiento", (jugador, parejas) =>
        {
            string move;

            if (parejas == 1)
                move = $"{jugador} ha encontrado {parejas} pareja";
            else
                move = $"{jugador} ha encontrado {parejas} parejas";

            movimientos.Add(move);

            if (parejas >= 8)
            {
                move = $"{jugador} ha ganado la partida";
                movimientos.Add(move);
                FinishGame();
            }

            StateHasChanged();
        });

        hubConnection.On<string>("JugadorDesconectado", (jugador) =>
        {
            FinishGame();
            var move = $"{jugador} se ha desconectado";
            movimientos.Add(move);
            jugadorDesconectado = true;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("EstablecerPartida", PartidaId, Usuario);
    }

    async Task IniciarPartida()
    {
        buscandoPartida = true;
        partidaTerminada = false;
        await hubConnection.SendAsync("IniciarPartida", PartidaId, Usuario);
    }

    async Task BuscarOtraPartida()
    {
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        timer.Dispose();
        await hubConnection.DisposeAsync();
    }

    async Task MarcarParejaEncontrada()
    {
        await hubConnection.SendAsync("RecibirParejaEncontrada", PartidaId, Usuario);
    }

    void SetupGame()
    {
        Random ran = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => ran.Next()).ToList();
        tenthsOfSecondsElapsed = 0;
        parejasEncontradas = 0;
        puntos = 0;
        lastAnimalFound = CaracterVacio;
        lastAnimalIndex = -1;
    }

    void ButtonClick(string animal, int index)
    {
        if (lastAnimalFound == CaracterVacio)
        {
            lastAnimalFound = animal;
            lastAnimalIndex = index;
        }
        else if (lastAnimalFound == animal && lastAnimalIndex != index)
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, CaracterVacio))
                .ToList();

            parejasEncontradas++;
            puntos += CalcularPuntos();
            MarcarParejaEncontrada();
        }
        else
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
        }
    }

    int CalcularPuntos()
    {
        int puntos = 200 - tenthsOfSecondsElapsed;

        if (puntos <= 10)
            return 10;

        return puntos;
    }

    void FinishGame()
    {
        timer.Stop();
        partidaTerminada = true;
        partidaIniciada = false;
        partidas++;
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            tiempo = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}
