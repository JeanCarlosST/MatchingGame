@page "/solo"
@using MatchingGame.Shared;
@using System.Timers;

<div class="row d-flex justify-content-center">

    <div class="col-xl-8 col-lg-10 col-12">

        <div class="row mb-3 mb-sm-4">

            <div class="col-sm-6 mb-3 mb-sm-0">
                <div class="input-group">
                    <label class="input-group-text">Modo</label>
                    <select class="form-select" @onchange="CambiarModo" disabled="@(partidaIniciada)">
                        <option value="0" selected>Normal</option>
                        <option value="1">Contrarreloj</option>
                        <option value="2">Una vida</option>
                        <option value="3">Memoria</option>
                        <option value="4">Cambiante</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-6">
                <div class="input-group">
                    <label class="input-group-text">Dificultad</label>
                    <select class="form-select" @onchange="CambiarDimensiones" disabled="@(partidaIniciada)">
                        <option value="0" selected>4 x 4</option>
                        <option value="1">4 x 5</option>
                        <option value="2">4 x 6</option>
                        <option value="3">4 x 7</option>
                        <option value="4">4 x 8</option>
                        <option value="5">6 x 6</option>
                        <option value="6">6 x 7</option>
                        <option value="7">6 x 8</option>
                        <option value="8">8 x 8</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="row">

            <div class="col-12 col-md-8">
                <div class="container d-flex justify-content-center @containerPaddingValue">
                    <div class="row @colValue">
                        @for (int j = 0; j < 2; j++)
                        {
                            <div class="col-6 p-0">
                                @for (int i = 0; i < shuffledAnimals.Count / 2; i++)
                                {
                                    int index = (j * (animalEmoji.Count / 2)) + i;
                                    string animal = shuffledAnimals[index];
                                    <button type="button" class="btn btn-light border border-dark col-@colCssValue p-1" disabled="@(!partidaIniciada)"
                                            @onclick="@(() => SeleccionarCasilla(animal, index))">
                                        <p class="fs-1 my-1 p-0">@animal</p>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-12 col-md-4 mt-3 mt-md-0">
                <div class="d-flex flex-column mb-3">
                    @if (!partidaIniciada)
                    {
                        <button type="button" class="btn btn-success btn-lg" @onclick="IniciarPartida">Listo</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-warning btn-lg" @onclick="ReiniciarPartida">Reintentar</button>
                    }
                </div>

                <div class="d-flex flex-column bg-light bg-gradient rounded-3 border border-2 border-dark">
                    <h3 class="m-0 px-2 pt-2">Parejas encontradas: @parejasEncontradas</h3>
                    <hr class="dropdown-divider">
                    <h3 class="m-0 px-2">Puntos: @puntos</h3>
                    <hr class="dropdown-divider">
                    <h3 class="m-0 px-2 pb-2">Tiempo: @tiempo</h3>
                </div>
            </div>

        </div>

    </div>

</div>

@code
{
    const string CaracterVacio = "\u200D";

    int filas = 4;
    int cols = 4;

    bool partidaIniciada;
    int modo;
    int dificultad;

    Timer timer;
    int decimasDeSegundos = 0;
    string tiempo = "0.0s";

    string lastAnimalFound = CaracterVacio;
    int lastAnimalIndex = -1;

    int parejasEncontradas = 0;
    int puntos = 0;

    int colCssValue = 6;
    string colValue = "col-xl-9 col-lg-12";
    string containerPaddingValue = "px-4";

    List<string> shuffledAnimals = new List<string>();
    List<string> animalEmoji = new List<string>();

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        GenerarTablero();
    }

    void GenerarTablero()
    {
        Random ran = new Random();
        animalEmoji = Emojis.ObtenerListaAnimales(filas, cols);
        shuffledAnimals = animalEmoji.OrderBy(item => ran.Next()).ToList();
    }

    void IniciarPartida()
    {
        partidaIniciada = true;

        SetupGame();
        timer.Start();
    }

    void SetupGame()
    {
        if(modo != 1)
            decimasDeSegundos = 0;
        else
            decimasDeSegundos = ObtenerTiempo();

        parejasEncontradas = 0;
        puntos = 0;
        lastAnimalFound = CaracterVacio;
        lastAnimalIndex = -1;
    }

    void ReiniciarPartida()
    {
        TerminarPartida();
        GenerarTablero();
    }

    void CambiarModo(ChangeEventArgs valor)
    {
        int modoValor = Convert.ToInt32(valor.Value.ToString());
        modo = modoValor;

        SetearTiempo();
    }

    void SetearTiempo()
    {
        if (modo == 1)
        {
            decimasDeSegundos = ObtenerTiempo();
            tiempo = (decimasDeSegundos / 10F).ToString("0.0s");
        }
    }

    void CambiarDimensiones(ChangeEventArgs valor)
    {
        int dimensionValor = Convert.ToInt32(valor.Value.ToString());
        dificultad = dimensionValor;

        switch(dificultad)
        {
            case 0: // 4x4
                filas = 4;
                cols = 4;
                colCssValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 1: // 4x5
                filas = 5;
                cols = 4;
                colCssValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 2: // 4x6
                filas = 4;
                cols = 6;
                colCssValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 3: // 4x7
                filas = 7;
                cols = 4;
                colCssValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 4: // 4x8
                filas = 4;
                cols = 8;
                colCssValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-4";
                break;

            case 5: // 6x6
                filas = 6;
                cols = 6;
                colCssValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 6: // 6x7
                filas = 7;
                cols = 6;
                colCssValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case 7: // 6x8
                filas = 6;
                cols = 8;
                colCssValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-2";
                break;

            case 8: // 8x8
                filas = 8;
                cols = 8;
                colCssValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-2";
                break;
        }

        GenerarTablero();
        SetearTiempo();
    }

    void SeleccionarCasilla(string animal, int index)
    {
        if (lastAnimalFound == CaracterVacio)
        {
            lastAnimalFound = animal;
            lastAnimalIndex = index;
        }
        else if (lastAnimalFound == animal && lastAnimalIndex != index)
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, CaracterVacio))
                .ToList();

            puntos += CalcularPuntos();
            parejasEncontradas++;

            if (parejasEncontradas >= animalEmoji.Count / 2)
            {
                TerminarPartida();
                GenerarTablero();
            }
        }
        else
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
            if (modo == 2)
            {
                TerminarPartida();
                GenerarTablero();
            }
        }
    }

    int CalcularPuntos()
    {
        int puntos = 200 - decimasDeSegundos;

        if (puntos <= 10)
            return 10;

        return puntos;
    }

    void TerminarPartida()
    {
        timer.Stop();
        partidaIniciada = false;
    }

    int ObtenerTiempo()
    {
        return (dificultad + 1) * 100;
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if(modo != 1)
                decimasDeSegundos++;
            else
            {
                decimasDeSegundos--;
                if(decimasDeSegundos <= 0)
                    TerminarPartida();
            }

            if(modo == 4)
            {
                if(decimasDeSegundos % 3 == 0)
                {
                    CambiarPosicionCartas();
                }
            }

            tiempo = (decimasDeSegundos / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }

    void CambiarPosicionCartas()
    {
        Random ran = new Random();

        shuffledAnimals.Where(x => !x.Equals(CaracterVacio));

        int index1, index2;

        do
        {
            index1 = ran.Next(shuffledAnimals.Count);
            index2 = ran.Next(shuffledAnimals.Count);
        } 
        while (shuffledAnimals[index1] == CaracterVacio || 
               shuffledAnimals[index2] == CaracterVacio);

        string emojiAux = shuffledAnimals[index1];
        shuffledAnimals[index1] = shuffledAnimals[index2];
        shuffledAnimals[index2] = emojiAux;
    }
}
