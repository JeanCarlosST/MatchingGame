@page "/solo"
@using MatchingGame.Shared;
@using System.Timers;

<div class="row d-flex justify-content-center">

    @if (!dimensionSeleccionada)
    {
        <div class="card col-6 p-0">

            <div class="card-header">
                Seleccionar dimensiones
            </div>

            <div class="card-body">

                <div class="btn-toolbar d-flex flex-column mb-2" role="toolbar">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(4, 4))">4x4</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(4, 5))">4x5</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(4, 6))">4x6</button>
                    </div>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(4, 7))">4x7</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(4, 8))">4x8</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(6, 6))">6x6</button>
                    </div>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(6, 7))">6x7</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(6, 8))">6x8</button>
                        <button type="button" class="btn btn-outline-primary m-1" @onclick="@(() => CambiarDimensiones(8, 8))">8x8</button>
                    </div>
                </div>

            </div>

            <div class="card-footer d-flex flex-column">

                <button type="button" class="btn btn-success" @onclick="SeleccionarDimension">Jugar</button>

            </div>

        </div>
    }
    else
    {
        <div class="@classValue">

            <div class="container">

                <div class="row">
                    @for (int j = 0; j < 2; j++)
                    {
                        <div class="col-6 p-0">
                            @for (int i = 0; i < shuffledAnimals.Count / 2; i++)
                            {
                                int index = (j * (animalEmoji.Count / 2)) + i;
                                string animal = shuffledAnimals[index];
                                <button type="button" class="btn btn-outline-dark col-@colValue p-1" disabled="@(!partidaIniciada)"
                                        @onclick="@(() => ButtonClick(animal, index))">
                                    <p class="fs-1 my-1 p-0">@animal</p>
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>

            @if (!partidaIniciada)
            {
                <button type="button" class="btn btn-success btn-lg col-lg-6 col-md-12 my-3" @onclick="IniciarPartida">Listo</button>
            }

            <div class="d-flex flex-column my-1">
                <h3>Parejas encontradas: @parejasEncontradas</h3>
                <h3>Puntos: @puntos</h3>
                <h3>Tiempo: @tiempo</h3>
            </div>

        </div>
    }
</div>

@code
{
    public bool partidaIniciada;
    public bool partidaTerminada;
    public bool dimensionSeleccionada;

    const string CaracterVacio = "\u200D";

    List<string> movimientos = new();

    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string tiempo;
    string lastAnimalFound = CaracterVacio;
    int lastAnimalIndex = -1;
    int parejasEncontradas = 0;
    int puntos = 0;
    int colValue = 4;
    int filas = 4, cols = 4;
    string classValue;

    List<string> shuffledAnimals = new List<string>();
    List<string> animalEmoji = new List<string>();// = Emojis.ObtenerListaAnimales(filas, cols);

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
    }

    void CambiarDimensiones(int filas, int cols)
    {
        this.filas = filas;
        this.cols = cols;
    }

    void SeleccionarDimension()
    {
        animalEmoji = Emojis.ObtenerListaAnimales(filas, cols);

        for (int i = 0; i < animalEmoji.Count; i++)
            shuffledAnimals.Add(CaracterVacio);

        switch (animalEmoji.Count)
        {
            case 16: case 20: case 28:
                colValue = 6;
                classValue = "col-12 col-sm-10 col-md-7 col-lg-6 col-xl-4";
                break;

            case 24: case 36: case 42:
                colValue = 4;
                classValue = "col-12 col-sm-12 col-md-10 col-lg-7 col-xl-6";
                break;

            case 32: case 48: case 64:
                colValue = 3;
                classValue = "col-12 col-lg-10 col-xl-7";
            break;
        }

        dimensionSeleccionada = true;
    }

    void IniciarPartida()
    {
        partidaTerminada = false;
        partidaIniciada = true;

        SetupGame();
        timer.Start();
    }

    void SetupGame()
    {
        Random ran = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => ran.Next()).ToList();
        tenthsOfSecondsElapsed = 0;
        parejasEncontradas = 0;
        puntos = 0;
        lastAnimalFound = CaracterVacio;
        lastAnimalIndex = -1;
    }

    void ButtonClick(string animal, int index)
    {
        if (lastAnimalFound == CaracterVacio)
        {
            lastAnimalFound = animal;
            lastAnimalIndex = index;
        }
        else if (lastAnimalFound == animal && lastAnimalIndex != index)
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, CaracterVacio))
                .ToList();

            puntos += CalcularPuntos();
            parejasEncontradas++;

            if (parejasEncontradas >= animalEmoji.Count / 2)
            {
                FinishGame();
            }
        }
        else
        {
            lastAnimalFound = CaracterVacio;
            lastAnimalIndex = -1;
        }
    }

    int CalcularPuntos()
    {
        int puntos = 200 - tenthsOfSecondsElapsed;

        if (puntos <= 10)
            return 10;

        return puntos;
    }

    void FinishGame()
    {
        timer.Stop();
        partidaTerminada = true;
        partidaIniciada = false;
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            tiempo = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}
