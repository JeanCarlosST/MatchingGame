@page "/login"
@using MatchingGame.ViewModels
@using MatchingGame.Shared
@inject ILoginViewModel _loginViewModel
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject IJSRuntime _jsRuntime
<div class="container">

    <div class="row d-flex justify-content-center">

        <div class="col-lg-5 mt-md-4 ">

            <div class="card shadow-lg bg-info bg-gradient border-1 border-dark">

                <div class="card-header border-0 bg-transparent">
                    <div class="d-flex flex-column text-center my-2">
                        <div class="d-flex justify-content-center">
                            <img class="rounded-circle" src="/Images/tempLogo.jpg" width="120" />
                        </div>
                        <span class="fs-4 mt-2">
                            
                            <b>Inicio de sesión</b>
                        </span>
                    </div>
                </div>

                <div class="d-flex justify-content-center m-1">
                    <form>
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="oi oi-person"></i></span>
                            <input type="text" class="form-control m-0" placeholder="Usuario o Email" @bind="_loginViewModel.Email">
                        </div>

                        <div class="input-group mb-2">
                            <span class="input-group-text"><i class="oi oi-key"></i></span>
                            <input type="password" class="form-control" placeholder="Contraseña" @bind="_loginViewModel.Clave">
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="_loginViewModel.Recuerdame">
                            <label class="form-check-label" for="customControlInline" >Recordarme</label>
                        </div>
                        <div class="d-flex flex-column mt-3">
                            <button type="button" class="btn btn-success" @onclick="AuthenticateJWT">Iniciar Sesión</button>
                        </div>
                    </form>
                </div>

                <div class="my-4 text-center">
                    ¿No tienes una cuenta? <a href="/register">Regístrate</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/nosotros", true);
        }
    }

    public async Task LoginUser()
    {
        await _loginViewModel.LoginUser();
        _navigationManager.NavigateTo("/", true);
    }

    private void TwitterSignIn()
    {
        _navigationManager.NavigateTo($"user/TwitterSignIn?isPersistent={_loginViewModel.Recuerdame}", true);
    }

    private void FacebookSignIn()
    {
        _navigationManager.NavigateTo($"user/FacebookSignIn?isPersistent={_loginViewModel.Recuerdame}", true);
    }

    private void GoogleSignIn()
    {
        _navigationManager.NavigateTo($"user/GoogleSignIn?isPersistent={_loginViewModel.Recuerdame}", true);
    }

    public async Task AuthenticateJWT()
    {
        AuthenticationResponse authenticationResponse = await _loginViewModel.AuthenticateJWT();
        if (authenticationResponse.Token != string.Empty)
        {
            await _localStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
            _navigationManager.NavigateTo("/", true);
        }
        else
        {
            Console.WriteLine("Error al Autenticar JWT");
        }
    }

    public async Task FacebookJWT()
    {
        var appId = await _loginViewModel.GetFacebookAppIDAsync();

        var accessTokenRequest = $"https://www.facebook.com/v11.0/dialog/oauth";
        accessTokenRequest += "?response_type=token";
        accessTokenRequest += $"&client_id={appId}";
        accessTokenRequest += "&redirect_uri=https://localhost:5001/FacebookAuth";

        _navigationManager.NavigateTo(accessTokenRequest, true);
    }

    public async Task TwitterJWT()
    {
        var twitterRequestTokenResponse = await _loginViewModel.GetTwitterOAuthTokenAsync();
        await _localStorageService.SetItemAsync("twitterRequestTokenResponse", twitterRequestTokenResponse);

        _navigationManager.NavigateTo("https://api.twitter.com/oauth/authorize?oauth_token=" + twitterRequestTokenResponse.OAuthToken);
    }
}