@page "/login"
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IToastService Toast

<div class="container">

    <div class="row d-flex justify-content-center">

        <div class="col-lg-5 mt-md-4 ">

            <div class="card shadow-lg bg-info bg-gradient border-1 border-dark">

                <div class="card-header border-0 bg-transparent">
                    <div class="d-flex flex-column text-center my-2">
                        <div class="d-flex justify-content-center">
                            <img class="rounded-circle" src="/Images/tempLogo.jpg" width="120" />
                        </div>
                        <span class="fs-4 mt-2">
                            
                            <b>Inicio de sesión</b>
                        </span>
                    </div>
                </div>

                <div class="d-flex justify-content-center m-1">
                    <form>
                        <div class="input-group mb-3">
                            <span class="input-group-text"><i class="oi oi-person"></i></span>
                            <input type="text" class="form-control m-0" placeholder="Usuario o Email" @bind="usuarioLogin.Email">
                        </div>

                        <div class="input-group mb-2">
                            <span class="input-group-text"><i class="oi oi-key"></i></span>
                            <input type="password" class="form-control" placeholder="Contraseña" @bind="usuarioLogin.Clave">
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="usuarioLogin.Recuerdame">
                            <label class="form-check-label" for="customControlInline" >Recordarme</label>
                        </div>
                        <div class="d-flex flex-column mt-3">
                            <button type="button" class="btn btn-success" @onclick="ValidarLogin">Iniciar Sesión</button>
                        </div>
                    </form>
                </div>

                <div class="my-4 text-center">
                    ¿No tienes una cuenta? <a href="/register">Regístrate</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    public LoginModel usuarioLogin { get; set; }

    protected override void OnInitialized()
    {
        usuarioLogin = new LoginModel();

    }
    //public async Task LoginUser()
    //{
    //    await _login.LoginUser();
    //    _navigationManager.NavigateTo("/", true);
    //}

    //private void TwitterSignIn()
    //{
    //    _navigationManager.NavigateTo($"user/TwitterSignIn?isPersistent={_login.Recuerdame}", true);
    //}

    //private void FacebookSignIn()
    //{
    //    _navigationManager.NavigateTo($"user/FacebookSignIn?isPersistent={_login.Recuerdame}", true);
    //}

    //private void GoogleSignIn()
    //{
    //    _navigationManager.NavigateTo($"user/GoogleSignIn?isPersistent={_login.Recuerdame}", true);
    //}

    public async Task ValidarLogin()
    {
        var usuarioDevuelto = await UserService.LoginAsync(usuarioLogin);

        if(usuarioLogin.Email != null)
        {
            await ((CustomAuthenticationStateProvider)AuthStateProvider).MarcarUsuarioLogeado(usuarioDevuelto);
            NavigationManager.NavigateTo("/");
            Toast.ShowSuccess("Logeado correctamente");
        }
        else
        {
            Toast.ShowError("Email o contraseña incorrectos");
        }


        //AuthenticationResponse authenticationResponse = await _login.AuthenticateJWT();
        //if (authenticationResponse.Token != string.Empty)
        //{
        //    await _localStorageService.SetItemAsync("jwt_token", authenticationResponse.Token);
        //    _navigationManager.NavigateTo("/", true);
        //}
        //else
        //{
        //    Console.WriteLine("Error al Autenticar JWT");
        //}
    }

    //public async Task FacebookJWT()
    //{
    //    var appId = await _login.GetFacebookAppIDAsync();

    //    var accessTokenRequest = $"https://www.facebook.com/v11.0/dialog/oauth";
    //    accessTokenRequest += "?response_type=token";
    //    accessTokenRequest += $"&client_id={appId}";
    //    accessTokenRequest += "&redirect_uri=https://localhost:5001/FacebookAuth";

    //    _navigationManager.NavigateTo(accessTokenRequest, true);
    //}

    //public async Task TwitterJWT()
    //{
    //    var twitterRequestTokenResponse = await _login.GetTwitterOAuthTokenAsync();
    //    await _localStorageService.SetItemAsync("twitterRequestTokenResponse", twitterRequestTokenResponse);

    //    _navigationManager.NavigateTo("https://api.twitter.com/oauth/authorize?oauth_token=" + twitterRequestTokenResponse.OAuthToken);
    //}
}