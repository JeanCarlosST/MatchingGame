@page "/one_vs_one"
@using MatchingGame.Shared;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="row d-flex justify-content-center">

    <div class="col-xl-8 col-lg-10 col-12">

        <div class="row mb-3 mb-sm-4">

            <div class="col-sm-4 mb-3 mb-sm-0">
                <div class="input-group">
                    <label class="input-group-text">Modo</label>
                    <select class="form-select" @onchange="CambiarModo" disabled="@(partidaIniciada || jugadorDesconectado || buscandoOponente)">
                        <option value="@Modo.Normal" selected>Normal</option>
                        @*<option value="@Modo.Contrarreloj">Contrarreloj</option>*@
                        @*<option value="@Modo.UnaVida">Una vida</option>*@
                        <option value="@Modo.Memoria" disabled>Memoria</option>
                        <option value="@Modo.Cambiante">Cambiante</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-4 mb-3 mb-sm-0">
                <div class="input-group">
                    <label class="input-group-text">Dificultad</label>
                    <select class="form-select" @onchange="CambiarDificultad" disabled="@(partidaIniciada || jugadorDesconectado || buscandoOponente)">
                        <option value="@Dificultad._4x4" selected>4 x 4</option>
                        <option value="@Dificultad._4x5">4 x 5</option>
                        <option value="@Dificultad._4x6">4 x 6</option>
                        <option value="@Dificultad._4x7">4 x 7</option>
                        <option value="@Dificultad._4x8">4 x 8</option>
                        <option value="@Dificultad._6x6">6 x 6</option>
                        <option value="@Dificultad._6x7">6 x 7</option>
                        <option value="@Dificultad._8x8">6 x 8</option>
                        <option value="@Dificultad._8x8">8 x 8</option>
                    </select>
                </div>
            </div>

            <div class="col-sm-4">
                <div class="input-group d-flex flex-column">
                    @if (Oponente == null && !buscandoOponente)
                    {
                        <button type="button" class="btn btn-info" @onclick="BuscarOponente" disabled="@(buscandoOponente)">
                            Buscar oponente
                        </button>
                    }
                    else if (!buscandoOponente)
                    {
                        <button type="button" class="btn btn-info" @onclick="PeticionCambiarPartida" disabled="@(jugadorDesconectado)">
                            Cambiar modo o dificultad
                        </button>
                    }
                    @if (buscandoOponente)
                    {
                        <button type="button" class="btn btn-danger" @onclick="CancelarBusqueda">
                            Cancelar búsqueda
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="row">

            <div class="col-12 col-md-6 position-relative">
                @if (Oponente != null)
                {
                    <button type="button" class="btn btn-success btn-lg bg-gradient position-absolute top-50 start-50
                                    translate-middle fs-2 px-4 rounded-pill border border-1 border-dark" style="z-index: 1;"
                            @onclick="IniciarPartida" disabled="@(partidaIniciada || jugadorDesconectado)">
                        Listo
                    </button>
                }
                <div class="row">
                    @for (int j = 0; j < 2; j++)
                    {
                        <div class="col-6 p-0">
                            @for (int i = 0; i < emojisMezclados.Count / 2; i++)
                            {
                                int index = (j * (listaEmojis.Count / 2)) + i;
                                string animal = emojisMezclados[index];
                                string btnClass = "btn-light border border-dark";

                                @if (index == ultimoAnimalIndice)
                                    btnClass = "btn-dark";

                                <button type="button" class="btn @btnClass col-@btnColValue p-1" disabled="@(!partidaIniciada || jugadorDesconectado)"
                                        @onclick="@(() => SeleccionarCasilla(animal, index))">
                                    <p class="fs-1 my-1 p-0">@animal</p>
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>

            <div class="row d-flex justify-content-center col-12 col-md-6 mt-3 mt-md-0">

                <div class="col-6">
                    <div class="card bg-primary">

                        <div class="card-header text-center">
                            <b>@Yo.Nickname - Tú</b>
                        </div>

                        <div class="card-body">
                            <div class="d-flex justify-content-center">
                                <img src="Images/smileyFace.jpg" width="60" class="rounded-circle border border-1 border-dark" />
                            </div>
                            <div class="row mt-2">
                                <div class="col-6">
                                    <label>Pares:</label>
                                    <label>@YoDetalle.ParesEncontrados/@Partida.ParesTotales</label>
                                </div>
                                <div class="col-6">
                                    <label>Victorias:</label>
                                    <label>@Yo.Victorias</label>
                                </div>
                            </div>
                        </div>

                        <div class="card-footer">
                            <div class="row">
                                <div class="col-6">
                                    <label>Puntos:</label>
                                    <label>@YoDetalle.Puntos</label>
                                </div>
                                <div class="col-6">
                                    <label>Tiempo:</label>
                                    <label><b>@YoDetalle.Tiempo.ToString("0.0s")</b></label>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="col-6">
                    <div class="card bg-danger">

                        @if (Oponente != null)
                        {
                            <div class="card-header text-center">
                                <b>@Oponente.Nickname - Oponente</b>
                            </div>

                            <div class="card-body">
                                <div class="d-flex justify-content-center">
                                    @if (!jugadorDesconectado)
                                    {
                                        <img src="Images/smileyFace.jpg" width="60" class="rounded-circle border border-1 border-dark" />
                                    }
                                    else
                                    {
                                        <span class="text-center"><b>JUGADOR DESCONECTADO</b></span>
                                    }
                                </div>
                                <div class="row mt-2">
                                    <div class="col-6">
                                        <label>Pares:</label>
                                        <label>@OponenteDetalle.ParesEncontrados/@Partida.ParesTotales</label>
                                    </div>
                                    <div class="col-6">
                                        <label>Victorias:</label>
                                        <label>@Oponente.Victorias</label>
                                    </div>
                                </div>
                            </div>

                            <div class="card-footer">
                                <div class="row">
                                    @if (mostrarResultadosOponente)
                                    {
                                        <div class="col-6">
                                            <label>Puntos:</label>
                                            <label>@OponenteDetalle.Puntos</label>
                                        </div>
                                        <div class="col-6">
                                            <label>Tiempo:</label>
                                            <label>@OponenteDetalle.Tiempo</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else if (buscandoOponente)
                        {
                            <div class="card-header text-center">
                                <b>...</b>
                            </div>

                            <div class="card-body text-center">
                                <div class="col-12">
                                    <span><b>Buscando oponente</b></span>
                                </div>
                                <div class="col-12 text-center my-3">
                                    <span class="spinner-border"></span>
                                </div>
                            </div>

                            <div class="card-footer">
                            </div>
                        }
                        else
                        {
                            <div class="card-header p-4">

                            </div>

                            <div class="card-body py-5 my-4">

                            </div>

                            <div class="card-footer p-4">

                            </div>
                        }
                    </div>
                </div>

                <div class="col-12 row my-3">
                    @if (Oponente != null)
                    {
                        <div class="col-6">
                            <div class="input-group d-flex flex-column">
                                <button type="button" class="btn btn-warning btn-lg"
                                        @onclick="ActivarModalAbandonar">
                                    Abandonar
                                </button>
                            </div>
                        </div>
                    }
                </div>

            </div>

        </div>

    </div>
    @if (modalAbandonar)
    {
        <Modal Titulo="Abandonar partida" Descripcion="¿Seguro que quieres abandonar la partida?"
               BtnVerdeTexto="Abandonar" BtnRojoTexto="Cancelar" OnClose="@AbandonarPartida" />
    }

    @if (modalCambiar)
    {
        <Modal Titulo="Cambiar modo y/o dificultad" Descripcion="@peticionCambiar"
               BtnVerdeTexto="Cambiar" BtnRojoTexto="Cancelar" OnClose="@CambiarPartida" />
    }
</div>

@code
{
    const string CaracterVacio = "\u200D";

    int filas = 4;
    int cols = 4;

    bool partidaIniciada;

    Modo modo = Modo.Normal;
    Dificultad dificultad = Dificultad._4x4;

    Modo peticionModo;
    Dificultad peticionDificultad;

    Timer temporizador;
    int decimasDeSegundos = 0;

    string ultimoEmojiEncontrado = CaracterVacio;
    int ultimoAnimalIndice = -1;

    int parejasEncontradas = 0;
    int puntos = 0;

    int btnColValue = 6;
    string colValue = "col-xl-9 col-lg-12";
    string containerPaddingValue = "px-4";

    List<string> emojisMezclados = new List<string>();
    List<string> listaEmojis = new List<string>();

    HubConnection unoVsUnoHubConnection;

    Partida Partida;
    Jugador Yo;
    PartidaJugadorDetalle YoDetalle;
    Jugador Oponente;
    PartidaJugadorDetalle OponenteDetalle;

    int PartidaId;
    bool buscandoOponente;
    bool partidaTerminada;
    bool partidaEncontrada;
    bool jugadorDesconectado;
    bool mostrarResultadosOponente;
    bool modalAbandonar;
    bool modalCambiar;
    bool esperandoAceptacionCambio;
    string peticionCambiar;

    protected override void OnInitialized()
    {
        temporizador = new Timer(100);
        temporizador.Elapsed += Timer_Tick;
        Partida = new Partida(modo, dificultad);
        YoDetalle = new PartidaJugadorDetalle();
        OponenteDetalle = new PartidaJugadorDetalle();

        Random ran = new Random();
        Yo = new Jugador() { Nickname = "Guest" + (10000 + ran.Next(90000 - 1)) };
        GenerarTablero();
    }

    protected override async Task OnInitializedAsync()
    {
        await ConnectToHub();
    }

    async Task ConnectToHub()
    {
        unoVsUnoHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/uno_vs_uno_hub"))
            .Build();

        //unoVsUnoHubConnection.On<Partida>("RecibirPartida", RecibirPartida);
        unoVsUnoHubConnection.On<Partida>("RecibirPartida", (partida) =>
        {
            Console.WriteLine($"ESTA MALDITA LINEA NO SE VA A IMPRIMIR COÑO");
            RefrescarDatosPartida(partida);

            StateHasChanged();
        });

        unoVsUnoHubConnection.On("Prueba", () =>
        {
            Console.WriteLine($"Estado: {unoVsUnoHubConnection.State}");
        });

        unoVsUnoHubConnection.On<Partida>("RecibirMovimiento", RefrescarDatosPartida);

        unoVsUnoHubConnection.On("JugadorDesconectado", JugadorDesconectado);

        unoVsUnoHubConnection.On<string>("RecibirPeticionCambio", RecibirPeticionCambio);

        unoVsUnoHubConnection.On<bool>("RespuestaPeticionCambio", RespuestaPeticionCambio);

        await unoVsUnoHubConnection.StartAsync();
    }

    void RecibirPartida(Partida partida)
    {
        RefrescarDatosPartida(partida);

        StateHasChanged();
    }

    public void RefrescarDatosPartida(Partida partida)
    {
        this.Partida = partida;

        if (Partida.JugadorUno.Nickname.Equals(Yo.Nickname))
        {
            Yo.ConnectionId = Partida.JugadorUno.ConnectionId;
            YoDetalle = Partida.JugadorUnoDetalle;
            Oponente = Partida.JugadorDos;
            OponenteDetalle = Partida.JugadorDosDetalle;
        }
        else
        {
            Yo.ConnectionId = Partida.JugadorDos.ConnectionId;
            YoDetalle = Partida.JugadorDosDetalle;
            Oponente = Partida.JugadorUno;
            OponenteDetalle = Partida.JugadorUnoDetalle;
        }

        if (OponenteDetalle.ParesEncontrados == Partida.ParesTotales)
            mostrarResultadosOponente = true;

        StateHasChanged();
    }

    void IniciarPartida()
    {
        partidaIniciada = true;

        if (partidaIniciada)
        {
            SetupGame();
            temporizador.Start();

            StateHasChanged();
        }
    }

    void RecibirMovimiento(Partida partida)
    {
        //if(jug1.ConnectionId == Yo.ConnectionId && jug1.Nickname == Yo.Nickname)
        //    Oponente = jug2;

        //else if (jug2.ConnectionId == Yo.ConnectionId && jug2.Nickname == Yo.Nickname)
        //    Oponente = jug1;

        RefrescarDatosPartida(partida);

        if (OponenteDetalle.ParesEncontrados == Partida.ParesTotales)
            mostrarResultadosOponente = true;

        StateHasChanged();
    }

    void JugadorDesconectado()
    {
        TerminarPartida();
        jugadorDesconectado = true;
        StateHasChanged();
    }

    void RecibirPeticionCambio(string peticion)
    {
        int index = peticion.IndexOf("_");
        string modoStr = peticion.Substring(0, index);
        string dificultadStr = peticion.Substring(index);

        peticionModo = (Modo)Enum.Parse(typeof(Modo), modoStr);
        peticionDificultad = (Dificultad)Enum.Parse(typeof(Dificultad), dificultadStr);

        peticionCambiar = $"{Oponente.Nickname} quiere cambiar la partida a modo {modoStr} en dificultad {dificultad}. ¿Aceptas?";
        modalCambiar = true;
    }

    void RespuestaPeticionCambio(bool respuesta)
    {
        if (respuesta)
        {
            esperandoAceptacionCambio = false;
            CambiarModo(peticionModo);
            CambiarDificultad(peticionDificultad);
        }
    }

    async Task BuscarOponente()
    {
        buscandoOponente = true;

        string peticionString = "partida" + modo.ToString() + dificultad.ToString();

        await unoVsUnoHubConnection.SendAsync("RecibirPeticion", Yo, peticionString);
    }

    async Task CancelarBusqueda()
    {
        buscandoOponente = false;
        await unoVsUnoHubConnection.SendAsync("EliminarPeticionDeUsuario", unoVsUnoHubConnection.ConnectionId);
    }

    async Task PeticionCambiarPartida()
    {
        esperandoAceptacionCambio = true;

        string peticionString = "partida" + peticionModo.ToString() + peticionDificultad.ToString();

        await unoVsUnoHubConnection.SendAsync("RecibirPeticionCambioPartida", Partida, peticionString);

        StateHasChanged();
    }

    //async Task MarcarPartidaListo()
    //{
    //    YoDetalle.Listo = true;
    //    YoDetalle.ParesEncontrados = 0;

    //    await unoVsUnoHubConnection.SendAsync("MarcarPartidaListo", PartidaId, Yo);
    //}

    void MarcarParejaEncontrada()
    {
        //YoDetalle.Puntos = puntos;
        //YoDetalle.ParesEncontrados = parejasEncontradas;
        //YoDetalle.Terminado = YoDetalle.ParesEncontrados == Partida.ParesTotales;

        unoVsUnoHubConnection.SendAsync("RecibirParejaEncontrada", Partida, Yo, YoDetalle);
    }

    void GenerarTablero()
    {
        Random ran = new Random();
        listaEmojis = Emojis.ObtenerListaAnimales(dificultad);
        emojisMezclados = listaEmojis.OrderBy(item => ran.Next()).ToList();
        Partida.ParesTotales = emojisMezclados.Count / 2;
    }

    void SetupGame()
    {
        if (modo == Modo.Contrarreloj)
            decimasDeSegundos = ObtenerTiempo();
        else
            decimasDeSegundos = 0;

        parejasEncontradas = 0;
        puntos = 0;
        ultimoEmojiEncontrado = CaracterVacio;
        ultimoAnimalIndice = -1;
    }

    void ReiniciarPartida()
    {
        TerminarPartida();
        GenerarTablero();
    }

    void ActivarModalAbandonar()
    {
        modalAbandonar = true;
        StateHasChanged();
    }

    void AbandonarPartida(bool abandonar)
    {
        if (abandonar)
            NavigationManager.NavigateTo("/");

        modalAbandonar = abandonar;
    }

    async Task CambiarPartida(bool cambiar)
    {
        await unoVsUnoHubConnection.SendAsync("RecibirRespuestaCambioPartida", Partida, Yo, cambiar, peticionModo, peticionDificultad);

        if (cambiar)
        {
            CambiarModo(peticionModo);
            CambiarDificultad(peticionDificultad);
        }

        modalCambiar = cambiar;
    }

    //void ReiniciarJugador()
    //{
    //    YoDetalle.Puntos = 0;
    //    YoDetalle.ParesEncontrados = 0;
    //    YoDetalle.Tiempo = 0.0f;
    //    YoDetalle.Listo = false;
    //    YoDetalle.Terminado = false;
    //}

    void CambiarModo(ChangeEventArgs valor)
    {
        Modo modo = (Modo)Enum.Parse(typeof(Modo), valor.Value.ToString());
        peticionModo = modo;

        if (Oponente != null)
            return;

        CambiarModo(peticionModo);
    }

    void CambiarModo(Modo modo)
    {
        this.modo = modo;
        SetearTiempo();
    }

    void SetearTiempo()
    {
        if (modo == Modo.Contrarreloj)
        {
            decimasDeSegundos = ObtenerTiempo();
            YoDetalle.Tiempo = (decimasDeSegundos / 10F);
        }
    }

    void CambiarDificultad(ChangeEventArgs valor)
    {
        Dificultad dificultad = (Dificultad)Enum.Parse(typeof(Dificultad), valor.Value.ToString());
        peticionDificultad = dificultad;
        if (Oponente != null)
            return;

        CambiarDificultad(peticionDificultad);
    }

    void CambiarDificultad(Dificultad dificultad)
    {
        this.dificultad = dificultad;
        switch (dificultad)
        {
            case Dificultad._4x4:
                filas = 4;
                cols = 4;
                btnColValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._4x5:
                filas = 5;
                cols = 4;
                btnColValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._4x6:
                filas = 4;
                cols = 6;
                btnColValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._4x7:
                filas = 7;
                cols = 4;
                btnColValue = 6;
                colValue = "col-xl-9 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._4x8:
                filas = 4;
                cols = 8;
                btnColValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._6x6:
                filas = 6;
                cols = 6;
                btnColValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._6x7:
                filas = 7;
                cols = 6;
                btnColValue = 4;
                colValue = "col-xl-10 col-lg-12";
                containerPaddingValue = "px-4";
                break;

            case Dificultad._6x8:
                filas = 6;
                cols = 8;
                btnColValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-2";
                break;

            case Dificultad._8x8:
                filas = 8;
                cols = 8;
                btnColValue = 3;
                colValue = "col-12";
                containerPaddingValue = "px-2";
                break;
        }

        GenerarTablero();
        SetearTiempo();
    }

    void SeleccionarCasilla(string animal, int index)
    {
        if (ultimoEmojiEncontrado == CaracterVacio)
        {
            ultimoEmojiEncontrado = animal;
            ultimoAnimalIndice = index;
        }
        else if (ultimoEmojiEncontrado == animal && ultimoAnimalIndice != index)
        {
            ultimoEmojiEncontrado = CaracterVacio;
            ultimoAnimalIndice = -1;
            emojisMezclados = emojisMezclados
                .Select(a => a.Replace(animal, CaracterVacio))
                .ToList();

            puntos += CalcularPuntos();
            parejasEncontradas++;
            MarcarParejaEncontrada();

            if (parejasEncontradas >= listaEmojis.Count / 2)
            {
                unoVsUnoHubConnection.SendAsync("PerderPartida", Partida, Yo).Wait();
                TerminarPartida();
                GenerarTablero();
            }
        }
        else
        {
            ultimoEmojiEncontrado = CaracterVacio;
            ultimoAnimalIndice = -1;
            if (modo == Modo.UnaVida)
            {
                TerminarPartida();
                GenerarTablero();
            }
        }
    }

    int CalcularPuntos()
    {
        int puntos = 200 - decimasDeSegundos;

        if (puntos <= 10)
            return 10;

        return puntos;
    }

    void TerminarPartida()
    {
        temporizador.Stop();
        partidaIniciada = false;
    }

    int ObtenerTiempo()
    {
        return ((int)dificultad + 1) * 100;
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            if (modo != Modo.Contrarreloj)
                decimasDeSegundos++;
            else
            {
                decimasDeSegundos--;
                if (decimasDeSegundos <= 0)
                {
                    unoVsUnoHubConnection.SendAsync("PerderPartida", Partida, Yo).Wait();
                    TerminarPartida();
                }
            }

            if (modo == Modo.Cambiante)
            {
                if (decimasDeSegundos % 7 == 0)
                {
                    CambiarPosicionCartas();
                }
            }

            YoDetalle.Tiempo = (decimasDeSegundos / 10F);
            StateHasChanged();
        });
    }

    void CambiarPosicionCartas()
    {
        if (emojisMezclados.FindAll(x => !x.Equals(CaracterVacio)).Count > 4)
        {
            Random ran = new Random();
            int indice1, indice2;

            do
            {
                indice1 = ran.Next(emojisMezclados.Count);
                indice2 = ran.Next(emojisMezclados.Count);
            }
            while (emojisMezclados[indice1] == CaracterVacio ||
                   emojisMezclados[indice2] == CaracterVacio ||
                   indice1 == ultimoAnimalIndice ||
                   indice2 == ultimoAnimalIndice);

            if (indice1 == ultimoAnimalIndice || indice2 == ultimoAnimalIndice)
            {
                ultimoEmojiEncontrado = CaracterVacio;
                ultimoAnimalIndice = -1;
            }

            string emojiAux = emojisMezclados[indice1];
            emojisMezclados[indice1] = emojisMezclados[indice2];
            emojisMezclados[indice2] = emojiAux;
        }
    }

    public async ValueTask DisposeAsync()
    {
        temporizador.Dispose();
        await unoVsUnoHubConnection.DisposeAsync();
    }
}
