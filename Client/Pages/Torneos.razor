@page "/torneos"
@using MatchingGame.Shared;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IToastService Toast;

<div class="container">
    <div class="row d-flex justify-content-center">

        @if (enPantallaInicial)
        {
        <div class="col-mg-10 col-lg-6 col-xl-4">

            <div class="card d-flex justify-content-center">
                <button type="button" class="btn btn-success m-5" @onclick="@(() => BuscarTorneo(4))">
                    Torneo 4 Participantes
                </button>
                <button type="button" class="btn btn-success mx-5 my-2" @onclick="@(() => BuscarTorneo(8))">
                    Torneo 8 Participantes
                </button>
                <button type="button" class="btn btn-success m-5" @onclick="@(() => BuscarTorneo(16))">
                    Torneo 16 Participantes
                </button>
            </div>
        </div>
        }
        else if (buscandoParticipantes)
        {
            <div class="col-md-6 col-xl-4">

                <ul class="list-group">
                    @for (int i = 0; i < Jugadores.Count; i++)
                    {
                        <li class="list-group-item d-flex">
                            <div class="mr-2">
                                <span class="fw-bold">@Jugadores[i].Nickname</span>
                            </div>
                        </li>
                    }

                    @for (int j = 0; j < cantidadJugadores - Jugadores.Count; j++)
                    {
                        <li class="list-group-item d-flex">
                            <div class="mr-2">
                                <span class="fw-bold">Buscando participante...</span>
                            </div>
                            <div class="ml-2">
                                <span class="spinner-border spinner-border-sm"></span>
                            </div>
                        </li>
                    }
                </ul>

            </div>
        }
        else if (mostrarTablero)
        {
            <div class="container">

                <ul class="nav nav-pills d-flex justify-content-center" role="tablist">

                    @if (cantidadJugadores == 16)
                    {
                        <li class="nav-item " role="presentation">
                            <button id="OctavosTab" type="button" class="nav-link @showTabs[0]" aria-selected="false"
                                    data-bs-toggle="tab" role="tab" data-bs-target="#divOctavos">
                                <span class="fw-bold fs-2 text-dark">Octavos</span>
                            </button>
                        </li>
                    }
                    @if (cantidadJugadores >= 8)
                    {
                        <li class="nav-item " role="presentation">
                            <button id="CuartosTab" type="button" class="nav-link @showTabs[1]" aria-selected="false"
                                    data-bs-toggle="tab" role="tab" data-bs-target="#divCuartos">
                                <span class="fw-bold fs-2 text-dark">Cuartos</span>
                            </button>
                        </li>
                    }
                    <li class="nav-item " role="presentation">
                        <button id="SemifinalesTab" type="button" class="nav-link @showTabs[2]" aria-selected="true"
                                data-bs-toggle="tab" role="tab" data-bs-target="#divSemifinales">
                            <span class="fw-bold fs-2 text-dark ">Semifinales</span>
                        </button>
                    </li>
                    <li class="nav-item " role="presentation">
                        <button id="FinalTab" type="button" class="nav-link @showTabs[3]" aria-selected="false"
                                data-bs-toggle="tab" role="tab" data-bs-target="#divFinal">
                            <span class="fw-bold fs-2 text-dark">Final</span>
                        </button>
                    </li>
                </ul>


                <div class="tab-content row d-flex justify-content-center">

                    @if (cantidadJugadores == 16)
                    {
                        <div class="tab-pane fade @showTabs[0] col-sm-12 col-md-7 px-4" id="divOctavos" role="tabpanel" aria-labelledby="OctavosTab">
                            <div class="col-12 align-items-center">
                                @foreach (var partida in Partidas.FindAll(p => p.Ronda == CantidadRondas() - 4))
                                {
                                    <Duelo Partida="partida" EsMiPartida="EsMiPartida(partida)" JugarBtnHandler="AlterarVistas" />
                                }
                            </div>
                        </div>
                    }
                    @if (cantidadJugadores >= 8)
                    {
                        <div class="tab-pane fade @showTabs[1] col-sm-12 col-md-7 px-4" id="divCuartos" role="tabpanel" aria-labelledby="CuartosTab">
                            <div class="col-12 align-items-center">
                                @foreach (var partida in Partidas.FindAll(p => p.Ronda == CantidadRondas() - 3))
                                {
                                    <Duelo Partida="partida" EsMiPartida="EsMiPartida(partida)" JugarBtnHandler="AlterarVistas" />
                                }
                            </div>
                        </div>
                    }
                    <div class="tab-pane fade @showTabs[2] col-sm-12 col-md-7 px-4" id="divSemifinales" role="tabpanel" aria-labelledby="SemifinalesTab">
                        <div class="col-12 align-items-center">
                            @foreach (var partida in Partidas.FindAll(p => p.Ronda == CantidadRondas() - 2))
                            {
                                <Duelo Partida="partida" EsMiPartida="EsMiPartida(partida)" JugarBtnHandler="AlterarVistas" />
                            }
                        </div>
                    </div>

                    <div class="tab-pane fade @showTabs[3] col-sm-12 col-md-7 px-4" id="divFinal" role="tabpanel" aria-labelledby="FinalTab">
                        <div class="col-12 align-items-center">
                            @foreach (var partida in Partidas.FindAll(p => p.Ronda == CantidadRondas() - 1))
                            {
                                <Duelo Partida="partida" EsMiPartida="EsMiPartida(partida)" JugarBtnHandler="AlterarVistas" />
                            }
                        </div>
                    </div>

                </div>
            </div>
        }
        else if (mostrarPartida)
        {
            <PartidaTorneo Partida="PartidaActual" Yo="Yo" Hub="torneoHubConnection" 
                           VerTableroBtnHandler="AlterarVistas" @ref="PartidaTorneo" 
                           Toast="Toast"/>
        }
    </div>
</div>

@code {
    private bool enPantallaInicial = true;
    private bool buscandoParticipantes;
    private bool mostrarTablero;
    private bool mostrarPartida;
    private string[] showTabs = new string[4]
    {
        "", "", "", ""
    };

    private int cantidadJugadores;
    private int rondaActual;
    private int tabActual;

    private Jugador Yo;

    private List<Jugador> Jugadores;
    private List<TorneoPartida> Partidas;

    private TorneoPartida PartidaActual;
    private PartidaTorneo PartidaTorneo;

    private HubConnection torneoHubConnection;

    protected override void OnInitialized()
    {
        Random ran = new Random();
        Jugador jugador = new Jugador();
        int num = 10000 + ran.Next(90000 - 1);
        jugador.Nickname = "Guest" + num;
        this.Yo = jugador;
        this.Jugadores = new List<Jugador>();
    }

    protected override async Task OnInitializedAsync()
    {
        torneoHubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/torneo_hub"))
            .Build();

        torneoHubConnection.On<List<Jugador>>("RecibirJugadores", RecibirJugadores);
        torneoHubConnection.On<List<TorneoPartida>>("IniciarTorneo", IniciarTorneo);
        torneoHubConnection.On<List<TorneoPartida>>("ActualizarPartidas", ActualizarPartidas);
        torneoHubConnection.On<TorneoPartida>("RecibirMovimiento", RecibirMovimiento);
        torneoHubConnection.On("Nollegara", () =>
        {
            Console.WriteLine("No sirve coño");
        });

        await torneoHubConnection.StartAsync();
    }

    void RecibirJugadores(List<Jugador> jugadores)
    {
        Jugadores = jugadores;
        StateHasChanged();
    }

    void IniciarTorneo(List<TorneoPartida> partidas)
    {
        Partidas = partidas;
        buscandoParticipantes = false;
        mostrarTablero = true;

        foreach (var partida in Partidas)
        {
            if (EsMiPartida(partida))
            {
                PartidaActual = partida;
                break;
            }
        }

        StateHasChanged();
    }

    bool EsMiPartida(TorneoPartida partida)
    {
        if (((partida.JugadorUno.Nickname == Yo.Nickname) && (partida.JugadorUno.ConnectionId == torneoHubConnection.ConnectionId)) ||
            ((partida.JugadorDos.Nickname == Yo.Nickname) && (partida.JugadorDos.ConnectionId == torneoHubConnection.ConnectionId)))
        {
            return true;
        }

        return false;
    }

    void ActualizarPartidas(List<TorneoPartida> partidas)
    {
        Partidas = partidas;

        int ronda = Partidas.Max(p => p.Ronda);

        PartidaActual = Partidas.First(p =>
            (p.JugadorUno.ConnectionId == Yo.ConnectionId ||
             p.JugadorDos.ConnectionId == Yo.ConnectionId) &&
             p.Ronda == ronda);

        foreach (var p in partidas)
            Console.WriteLine(p);

        if(rondaActual < ronda)
        {
            rondaActual = ronda;
            tabActual = 4 - CantidadRondas() + rondaActual;
            Toast.ShowInfo("Torneo avanza a la siguite ronda", "Ronda finalizada");
        }

        mostrarTablero = true;
        mostrarPartida = false;
        ActualizarTableroRonda();
        StateHasChanged();
    }

    async Task RecibirMovimiento(TorneoPartida partida)
    {
        PartidaActual = partida;
        PartidaTorneo.RefrescarDatosPartida(partida);
        if (PartidaActual.Terminada)
        {
            await torneoHubConnection.SendAsync("ActualizarPartidas", PartidaActual);
        }

        StateHasChanged();
    }

    async Task BuscarTorneo(int cantJug)
    {
        cantidadJugadores = cantJug;
        string peticionStr = $"torneo{cantJug}";

        await torneoHubConnection.SendAsync("RecibirPeticion", Yo, peticionStr);

        enPantallaInicial = false;
        buscandoParticipantes = true;

        tabActual = 4 - CantidadRondas();
        ActualizarTableroRonda();
    }

    void AlterarVistas()
    {
        mostrarPartida = !mostrarPartida;
        mostrarTablero = !mostrarTablero;

        if(mostrarPartida)
        {
            ActualizarTableroRonda();
        }
    }

    void ActualizarTableroRonda()
    {
        for (int i = 0; i < 4; i++)
        {
            if (i == tabActual)
                showTabs[i] = "show active";
            else
                showTabs[i] = "";
            Console.WriteLine(showTabs[i]);
        }
    }

    int CantidadRondas()
    {
        if (cantidadJugadores == 4)
        {
            return 2;
        }
        if (cantidadJugadores == 8)
        {
            return 3;
        }
        if (cantidadJugadores == 16)
        {
            return 4;
        }
        return -1;
    }
}