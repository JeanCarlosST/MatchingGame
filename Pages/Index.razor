@page "/"
@using System.Timers;

<style>
    .container {
        width: 424px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (int i = 0; i < shuffledAnimals.Count; i++)
        {
            int index = i;
            string animal = shuffledAnimals[i];
            <div class="col-3 p-1">
                @if (foundedAnimals.Contains(index))
                {
                    <button type="button" class="btn btn-outline-dark" disabled />
                }
                else
                {
                    <button type="button" class="btn btn-success"
                            @onclick="@(()=> ButtonClick(index))">
                        <h1 hidden="@(!clickedAnimals.Contains(index))">@animal</h1>
                    </button>
                }
            </div>
        }
    </div>

    <div class="row">
        <h2>Parejas encontradas: @(foundedAnimals.Count/2)</h2>
    </div>

    <div class="row">
        <h2>Tiempo: @tiempo</h2>
    </div>

</div>

@code
{
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string tiempo;
    string lastAnimalFound = string.Empty;
    bool playing = false;

    List<int> clickedAnimals = new List<int>();
    List<int> foundedAnimals = new List<int>();
    List<string> shuffledAnimals = new List<string>();
    List<string> animalEmoji = new List<string>()
{
        "🐵","🐵",
        "🐶","🐶",
        "🐷","🐷",
        "🐴","🐴",
        "🐔","🐔",
        "🦊","🦊",
        "🐸","🐸",
        "🐼","🐼"
    };

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetupGame();
    }

    void SetupGame()
    {
        Random ran = new Random();
        clickedAnimals.Clear();
        foundedAnimals.Clear();
        shuffledAnimals = animalEmoji.OrderBy(item => ran.Next()).ToList();
        tenthsOfSecondsElapsed = 0;
    }

    void ButtonClick(int index)
    {
        timer.Start();
        playing = true;

        if (clickedAnimals.Count == 2)
            return;

        clickedAnimals.Add(index);
        string animal = shuffledAnimals[index];

        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
        }
        else if (lastAnimalFound == animal)
        {

            Task.Delay(1000).ContinueWith((t) =>
            {
                lastAnimalFound = string.Empty;
                shuffledAnimals = shuffledAnimals
                    .Select(a => a.Replace(animal, string.Empty))
                    .ToList();
                foundedAnimals.Add(clickedAnimals[0]);
                foundedAnimals.Add(clickedAnimals[1]);
                clickedAnimals.Clear();
            });

            CheckVictory();
        }
        else
        {
            lastAnimalFound = string.Empty;
            clickedAnimals.Clear();
        }

    }

    void CheckVictory()
    {
        if (foundedAnimals.Count / 2 == 8 && playing)
        {
            playing = false;
            timer.Stop();
            tiempo += " - Play Again?";
            SetupGame();
        }
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            tiempo = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}